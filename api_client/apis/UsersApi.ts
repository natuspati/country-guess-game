/* tslint:disable */
/* eslint-disable */
/**
 * Country Guess API
 * Description placeholder2
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TokenObtainPair,
  TokenRefresh,
  TokenVerify,
} from '../models';
import {
    TokenObtainPairFromJSON,
    TokenObtainPairToJSON,
    TokenRefreshFromJSON,
    TokenRefreshToJSON,
    TokenVerifyFromJSON,
    TokenVerifyToJSON,
} from '../models';

export interface UsersTokenCreateRequest {
    tokenObtainPair: TokenObtainPair;
}

export interface UsersTokenRefreshCreateRequest {
    tokenRefresh: TokenRefresh;
}

export interface UsersTokenVerifyCreateRequest {
    tokenVerify: TokenVerify;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     */
    async usersTokenCreateRaw(requestParameters: UsersTokenCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenObtainPair>> {
        if (requestParameters.tokenObtainPair === null || requestParameters.tokenObtainPair === undefined) {
            throw new runtime.RequiredError('tokenObtainPair','Required parameter requestParameters.tokenObtainPair was null or undefined when calling usersTokenCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/token/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenObtainPairToJSON(requestParameters.tokenObtainPair),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenObtainPairFromJSON(jsonValue));
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     */
    async usersTokenCreate(requestParameters: UsersTokenCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenObtainPair> {
        const response = await this.usersTokenCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     */
    async usersTokenRefreshCreateRaw(requestParameters: UsersTokenRefreshCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRefresh>> {
        if (requestParameters.tokenRefresh === null || requestParameters.tokenRefresh === undefined) {
            throw new runtime.RequiredError('tokenRefresh','Required parameter requestParameters.tokenRefresh was null or undefined when calling usersTokenRefreshCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/token/refresh/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRefreshToJSON(requestParameters.tokenRefresh),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenRefreshFromJSON(jsonValue));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     */
    async usersTokenRefreshCreate(requestParameters: UsersTokenRefreshCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRefresh> {
        const response = await this.usersTokenRefreshCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     */
    async usersTokenVerifyCreateRaw(requestParameters: UsersTokenVerifyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenVerify>> {
        if (requestParameters.tokenVerify === null || requestParameters.tokenVerify === undefined) {
            throw new runtime.RequiredError('tokenVerify','Required parameter requestParameters.tokenVerify was null or undefined when calling usersTokenVerifyCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/token/verify/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenVerifyToJSON(requestParameters.tokenVerify),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenVerifyFromJSON(jsonValue));
    }

    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     */
    async usersTokenVerifyCreate(requestParameters: UsersTokenVerifyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenVerify> {
        const response = await this.usersTokenVerifyCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
